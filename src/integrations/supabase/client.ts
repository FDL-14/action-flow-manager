
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tsjdsbxgottssqqlzfxl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRzamRzYnhnb3R0c3NxcWx6ZnhsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1ODM3NDgsImV4cCI6MjA2MDE1OTc0OH0.3WVd3cIBxyUlJGBjCzwLs5YY14xC6ZNtMbb5zuxF0EY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  }
);

// Custom types to help with conversion between application types and database types
export type JsonObject = { [key: string]: any };

// Função revisada para melhor tratamento de UUIDs
export const convertToUUID = (id: string | null | undefined): string | null => {
  // Se id for null ou undefined, retornar null
  if (id === null || id === undefined) {
    return null;
  }
  
  // Limpar o ID, removendo formatação que possa causar problemas
  const cleanId = id.toString().trim();
  
  // Verificar se o ID já é um UUID válido (formato padrão)
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  if (uuidRegex.test(cleanId)) {
    console.log(`ID ${cleanId} já é um UUID válido`);
    return cleanId;
  }
  
  // Verificar se o ID corresponde a um UUID das empresas conhecidas no sistema
  // Esta é uma lista de IDs reais do banco de dados que vimos nos logs
  const knownCompanyIds = [
    "12f6f95b-eeca-411d-a098-221053ab9f03",
    "c5f9ed6d-8936-4989-9ee8-dddee5ccf3a0",
    "7f6f84e6-4362-4ebe-b8cc-6e11ec8407f7",
    "8854bd89-6ef7-4419-9ee3-b968bc279f19"
  ];
  
  // Para IDs numéricos, verificar se correspondem às empresas conhecidas
  if (/^\d+$/.test(cleanId)) {
    console.log(`Verificando ID numérico ${cleanId}`);
    
    // Se for o ID da empresa Total Data que vimos nos logs (1745060635120)
    if (cleanId === "1745060635120") {
      return "12f6f95b-eeca-411d-a098-221053ab9f03"; // ID real da empresa Total Data
    }
    
    // Para outros IDs, usar o formato UUID v4
    const paddedId = cleanId.padStart(12, '0').substring(0, 12);
    return `00000000-0000-4000-a000-${paddedId}`;
  }
  
  // Se não for UUID válido nem ID numérico, tentar encontrar um UUID correspondente
  for (const companyId of knownCompanyIds) {
    if (companyId.includes(cleanId) || cleanId.includes(companyId.substring(0, 8))) {
      console.log(`Match aproximado encontrado para ID ${cleanId}: ${companyId}`);
      return companyId;
    }
  }
  
  // Se não conseguir converter adequadamente, gerar um novo UUID
  console.log(`ID ${cleanId} não pode ser convertido, gerando UUID aleatório`);
  return crypto.randomUUID();
};

// Enable realtime changes for the actions table
(async () => {
  try {
    // Configure realtime channel
    const channel = supabase.channel('schema-db-changes')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'actions' },
        (payload) => {
          console.log('Realtime change received:', payload);
        }
      )
      .subscribe();
      
    console.log('Realtime channel configured for actions table');
  } catch (error) {
    console.error('Error setting up realtime:', error);
  }
})();
