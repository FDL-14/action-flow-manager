
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tsjdsbxgottssqqlzfxl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRzamRzYnhnb3R0c3NxcWx6ZnhsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1ODM3NDgsImV4cCI6MjA2MDE1OTc0OH0.3WVd3cIBxyUlJGBjCzwLs5YY14xC6ZNtMbb5zuxF0EY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  }
);

// Custom types to help with conversion between application types and database types
export type JsonObject = { [key: string]: any };

// Helper function to convert timestamp IDs to UUIDs
export const convertToUUID = (id: string): string => {
  // Check if id is already a valid UUID
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  if (uuidRegex.test(id)) {
    return id;
  }
  
  // Generate a deterministic UUID from the original ID to ensure consistency
  return `00000000-0000-4000-a000-${id.padStart(12, '0').substring(0, 12)}`;
};

// Enable realtime changes for the actions table
(async () => {
  try {
    // Configure realtime channel
    const channel = supabase.channel('schema-db-changes')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'actions' },
        (payload) => {
          console.log('Realtime change received:', payload);
        }
      )
      .subscribe();
      
    console.log('Realtime channel configured for actions table');
  } catch (error) {
    console.error('Error setting up realtime:', error);
  }
})();
